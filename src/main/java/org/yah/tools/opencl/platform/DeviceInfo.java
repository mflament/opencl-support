package org.yah.tools.opencl.platform;

import static org.lwjgl.opencl.CL10.CL_DEVICE_ADDRESS_BITS;
import static org.lwjgl.opencl.CL10.CL_DEVICE_AVAILABLE;
import static org.lwjgl.opencl.CL10.CL_DEVICE_COMPILER_AVAILABLE;
import static org.lwjgl.opencl.CL10.CL_DEVICE_ENDIAN_LITTLE;
import static org.lwjgl.opencl.CL10.CL_DEVICE_ERROR_CORRECTION_SUPPORT;
import static org.lwjgl.opencl.CL10.CL_DEVICE_EXECUTION_CAPABILITIES;
import static org.lwjgl.opencl.CL10.CL_DEVICE_EXTENSIONS;
import static org.lwjgl.opencl.CL10.CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE;
import static org.lwjgl.opencl.CL10.CL_DEVICE_GLOBAL_MEM_CACHE_SIZE;
import static org.lwjgl.opencl.CL10.CL_DEVICE_GLOBAL_MEM_CACHE_TYPE;
import static org.lwjgl.opencl.CL10.CL_DEVICE_GLOBAL_MEM_SIZE;
import static org.lwjgl.opencl.CL10.CL_DEVICE_IMAGE2D_MAX_HEIGHT;
import static org.lwjgl.opencl.CL10.CL_DEVICE_IMAGE2D_MAX_WIDTH;
import static org.lwjgl.opencl.CL10.CL_DEVICE_IMAGE3D_MAX_DEPTH;
import static org.lwjgl.opencl.CL10.CL_DEVICE_IMAGE3D_MAX_HEIGHT;
import static org.lwjgl.opencl.CL10.CL_DEVICE_IMAGE3D_MAX_WIDTH;
import static org.lwjgl.opencl.CL10.CL_DEVICE_IMAGE_SUPPORT;
import static org.lwjgl.opencl.CL10.CL_DEVICE_LOCAL_MEM_SIZE;
import static org.lwjgl.opencl.CL10.CL_DEVICE_LOCAL_MEM_TYPE;
import static org.lwjgl.opencl.CL10.CL_DEVICE_MAX_CLOCK_FREQUENCY;
import static org.lwjgl.opencl.CL10.CL_DEVICE_MAX_COMPUTE_UNITS;
import static org.lwjgl.opencl.CL10.CL_DEVICE_MAX_CONSTANT_ARGS;
import static org.lwjgl.opencl.CL10.CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE;
import static org.lwjgl.opencl.CL10.CL_DEVICE_MAX_MEM_ALLOC_SIZE;
import static org.lwjgl.opencl.CL10.CL_DEVICE_MAX_PARAMETER_SIZE;
import static org.lwjgl.opencl.CL10.CL_DEVICE_MAX_READ_IMAGE_ARGS;
import static org.lwjgl.opencl.CL10.CL_DEVICE_MAX_SAMPLERS;
import static org.lwjgl.opencl.CL10.CL_DEVICE_MAX_WORK_GROUP_SIZE;
import static org.lwjgl.opencl.CL10.CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS;
import static org.lwjgl.opencl.CL10.CL_DEVICE_MAX_WORK_ITEM_SIZES;
import static org.lwjgl.opencl.CL10.CL_DEVICE_MAX_WRITE_IMAGE_ARGS;
import static org.lwjgl.opencl.CL10.CL_DEVICE_MEM_BASE_ADDR_ALIGN;
import static org.lwjgl.opencl.CL10.CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE;
import static org.lwjgl.opencl.CL10.CL_DEVICE_NAME;
import static org.lwjgl.opencl.CL10.CL_DEVICE_PLATFORM;
import static org.lwjgl.opencl.CL10.CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR;
import static org.lwjgl.opencl.CL10.CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE;
import static org.lwjgl.opencl.CL10.CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT;
import static org.lwjgl.opencl.CL10.CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT;
import static org.lwjgl.opencl.CL10.CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG;
import static org.lwjgl.opencl.CL10.CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT;
import static org.lwjgl.opencl.CL10.CL_DEVICE_PROFILE;
import static org.lwjgl.opencl.CL10.CL_DEVICE_PROFILING_TIMER_RESOLUTION;
import static org.lwjgl.opencl.CL10.CL_DEVICE_QUEUE_PROPERTIES;
import static org.lwjgl.opencl.CL10.CL_DEVICE_SINGLE_FP_CONFIG;
import static org.lwjgl.opencl.CL10.CL_DEVICE_TYPE;
import static org.lwjgl.opencl.CL10.CL_DEVICE_VENDOR;
import static org.lwjgl.opencl.CL10.CL_DEVICE_VENDOR_ID;
import static org.lwjgl.opencl.CL10.CL_DEVICE_VERSION;
import static org.lwjgl.opencl.CL10.CL_DRIVER_VERSION;
import static org.lwjgl.opencl.CL11.CL_DEVICE_HOST_UNIFIED_MEMORY;
import static org.lwjgl.opencl.CL11.CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR;
import static org.lwjgl.opencl.CL11.CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE;
import static org.lwjgl.opencl.CL11.CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT;
import static org.lwjgl.opencl.CL11.CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF;
import static org.lwjgl.opencl.CL11.CL_DEVICE_NATIVE_VECTOR_WIDTH_INT;
import static org.lwjgl.opencl.CL11.CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG;
import static org.lwjgl.opencl.CL11.CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT;
import static org.lwjgl.opencl.CL11.CL_DEVICE_OPENCL_C_VERSION;
import static org.lwjgl.opencl.CL11.CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF;
import static org.lwjgl.opencl.CL12.CL_DEVICE_BUILT_IN_KERNELS;
import static org.lwjgl.opencl.CL12.CL_DEVICE_DOUBLE_FP_CONFIG;
import static org.lwjgl.opencl.CL12.CL_DEVICE_IMAGE_MAX_ARRAY_SIZE;
import static org.lwjgl.opencl.CL12.CL_DEVICE_IMAGE_MAX_BUFFER_SIZE;
import static org.lwjgl.opencl.CL12.CL_DEVICE_LINKER_AVAILABLE;
import static org.lwjgl.opencl.CL12.CL_DEVICE_PARENT_DEVICE;
import static org.lwjgl.opencl.CL12.CL_DEVICE_PARTITION_AFFINITY_DOMAIN;
import static org.lwjgl.opencl.CL12.CL_DEVICE_PARTITION_MAX_SUB_DEVICES;
import static org.lwjgl.opencl.CL12.CL_DEVICE_PARTITION_PROPERTIES;
import static org.lwjgl.opencl.CL12.CL_DEVICE_PARTITION_TYPE;
import static org.lwjgl.opencl.CL12.CL_DEVICE_PREFERRED_INTEROP_USER_SYNC;
import static org.lwjgl.opencl.CL12.CL_DEVICE_PRINTF_BUFFER_SIZE;
import static org.lwjgl.opencl.CL12.CL_DEVICE_REFERENCE_COUNT;
import static org.lwjgl.opencl.CL20.CL_DEVICE_GLOBAL_VARIABLE_PREFERRED_TOTAL_SIZE;
import static org.lwjgl.opencl.CL20.CL_DEVICE_MAX_GLOBAL_VARIABLE_SIZE;
import static org.lwjgl.opencl.CL20.CL_DEVICE_MAX_ON_DEVICE_EVENTS;
import static org.lwjgl.opencl.CL20.CL_DEVICE_MAX_ON_DEVICE_QUEUES;
import static org.lwjgl.opencl.CL20.CL_DEVICE_MAX_PIPE_ARGS;
import static org.lwjgl.opencl.CL20.CL_DEVICE_MAX_READ_WRITE_IMAGE_ARGS;
import static org.lwjgl.opencl.CL20.CL_DEVICE_PIPE_MAX_ACTIVE_RESERVATIONS;
import static org.lwjgl.opencl.CL20.CL_DEVICE_PIPE_MAX_PACKET_SIZE;
import static org.lwjgl.opencl.CL20.CL_DEVICE_PREFERRED_GLOBAL_ATOMIC_ALIGNMENT;
import static org.lwjgl.opencl.CL20.CL_DEVICE_PREFERRED_LOCAL_ATOMIC_ALIGNMENT;
import static org.lwjgl.opencl.CL20.CL_DEVICE_PREFERRED_PLATFORM_ATOMIC_ALIGNMENT;
import static org.lwjgl.opencl.CL20.CL_DEVICE_QUEUE_ON_DEVICE_MAX_SIZE;
import static org.lwjgl.opencl.CL20.CL_DEVICE_QUEUE_ON_DEVICE_PREFERRED_SIZE;
import static org.lwjgl.opencl.CL20.CL_DEVICE_QUEUE_ON_DEVICE_PROPERTIES;
import static org.lwjgl.opencl.CL20.CL_DEVICE_QUEUE_ON_HOST_PROPERTIES;
import static org.lwjgl.opencl.CL20.CL_DEVICE_SVM_CAPABILITIES;
import static org.lwjgl.opencl.CL21.CL_DEVICE_IL_VERSION;
import static org.lwjgl.opencl.CL21.CL_DEVICE_MAX_NUM_SUB_GROUPS;
import static org.lwjgl.opencl.CL21.CL_DEVICE_SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS;

import org.lwjgl.PointerBuffer;
import org.lwjgl.system.MemoryUtil;
import org.yah.tools.opencl.CLEnum;
import org.yah.tools.opencl.CLInfoReader;
import org.yah.tools.opencl.CLVersion;

public enum DeviceInfo implements CLEnum {

    // @formatter:off
    DEVICE_TYPE(CL_DEVICE_TYPE, CLVersion.CL10),
    DEVICE_VENDOR_ID(CL_DEVICE_VENDOR_ID, CLVersion.CL10),
    DEVICE_MAX_COMPUTE_UNITS(CL_DEVICE_MAX_COMPUTE_UNITS, CLVersion.CL10),
    DEVICE_MAX_WORK_ITEM_DIMENSIONS(CL_DEVICE_MAX_WORK_ITEM_DIMENSIONS, CLVersion.CL10),
    DEVICE_MAX_WORK_GROUP_SIZE(CL_DEVICE_MAX_WORK_GROUP_SIZE, CLVersion.CL10),
    DEVICE_MAX_WORK_ITEM_SIZES(CL_DEVICE_MAX_WORK_ITEM_SIZES, CLVersion.CL10),
    DEVICE_PREFERRED_VECTOR_WIDTH_CHAR(CL_DEVICE_PREFERRED_VECTOR_WIDTH_CHAR, CLVersion.CL10),
    DEVICE_PREFERRED_VECTOR_WIDTH_SHORT(CL_DEVICE_PREFERRED_VECTOR_WIDTH_SHORT, CLVersion.CL10),
    DEVICE_PREFERRED_VECTOR_WIDTH_INT(CL_DEVICE_PREFERRED_VECTOR_WIDTH_INT, CLVersion.CL10),
    DEVICE_PREFERRED_VECTOR_WIDTH_LONG(CL_DEVICE_PREFERRED_VECTOR_WIDTH_LONG, CLVersion.CL10),
    DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT(CL_DEVICE_PREFERRED_VECTOR_WIDTH_FLOAT, CLVersion.CL10),
    DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE(CL_DEVICE_PREFERRED_VECTOR_WIDTH_DOUBLE, CLVersion.CL10),
    DEVICE_MAX_CLOCK_FREQUENCY(CL_DEVICE_MAX_CLOCK_FREQUENCY, CLVersion.CL10),
    DEVICE_ADDRESS_BITS(CL_DEVICE_ADDRESS_BITS, CLVersion.CL10),
    DEVICE_MAX_READ_IMAGE_ARGS(CL_DEVICE_MAX_READ_IMAGE_ARGS, CLVersion.CL10),
    DEVICE_MAX_WRITE_IMAGE_ARGS(CL_DEVICE_MAX_WRITE_IMAGE_ARGS, CLVersion.CL10),
    DEVICE_MAX_MEM_ALLOC_SIZE(CL_DEVICE_MAX_MEM_ALLOC_SIZE, CLVersion.CL10),
    DEVICE_IMAGE2D_MAX_WIDTH(CL_DEVICE_IMAGE2D_MAX_WIDTH, CLVersion.CL10),
    DEVICE_IMAGE2D_MAX_HEIGHT(CL_DEVICE_IMAGE2D_MAX_HEIGHT, CLVersion.CL10),
    DEVICE_IMAGE3D_MAX_WIDTH(CL_DEVICE_IMAGE3D_MAX_WIDTH, CLVersion.CL10),
    DEVICE_IMAGE3D_MAX_HEIGHT(CL_DEVICE_IMAGE3D_MAX_HEIGHT, CLVersion.CL10),
    DEVICE_IMAGE3D_MAX_DEPTH(CL_DEVICE_IMAGE3D_MAX_DEPTH, CLVersion.CL10),
    DEVICE_IMAGE_SUPPORT(CL_DEVICE_IMAGE_SUPPORT, CLVersion.CL10),
    DEVICE_MAX_PARAMETER_SIZE(CL_DEVICE_MAX_PARAMETER_SIZE, CLVersion.CL10),
    DEVICE_MAX_SAMPLERS(CL_DEVICE_MAX_SAMPLERS, CLVersion.CL10),
    DEVICE_MEM_BASE_ADDR_ALIGN(CL_DEVICE_MEM_BASE_ADDR_ALIGN, CLVersion.CL10),
    DEVICE_MIN_DATA_TYPE_ALIGN_SIZE(CL_DEVICE_MIN_DATA_TYPE_ALIGN_SIZE, CLVersion.CL10),
    DEVICE_SINGLE_FP_CONFIG(CL_DEVICE_SINGLE_FP_CONFIG, CLVersion.CL10),
    DEVICE_GLOBAL_MEM_CACHE_TYPE(CL_DEVICE_GLOBAL_MEM_CACHE_TYPE, CLVersion.CL10),
    DEVICE_GLOBAL_MEM_CACHELINE_SIZE(CL_DEVICE_GLOBAL_MEM_CACHELINE_SIZE, CLVersion.CL10),
    DEVICE_GLOBAL_MEM_CACHE_SIZE(CL_DEVICE_GLOBAL_MEM_CACHE_SIZE, CLVersion.CL10),
    DEVICE_GLOBAL_MEM_SIZE(CL_DEVICE_GLOBAL_MEM_SIZE, CLVersion.CL10),
    DEVICE_MAX_CONSTANT_BUFFER_SIZE(CL_DEVICE_MAX_CONSTANT_BUFFER_SIZE, CLVersion.CL10),
    DEVICE_MAX_CONSTANT_ARGS(CL_DEVICE_MAX_CONSTANT_ARGS, CLVersion.CL10),
    DEVICE_LOCAL_MEM_TYPE(CL_DEVICE_LOCAL_MEM_TYPE, CLVersion.CL10),
    DEVICE_LOCAL_MEM_SIZE(CL_DEVICE_LOCAL_MEM_SIZE, CLVersion.CL10),
    DEVICE_ERROR_CORRECTION_SUPPORT(CL_DEVICE_ERROR_CORRECTION_SUPPORT, CLVersion.CL10),
    DEVICE_PROFILING_TIMER_RESOLUTION(CL_DEVICE_PROFILING_TIMER_RESOLUTION, CLVersion.CL10),
    DEVICE_ENDIAN_LITTLE(CL_DEVICE_ENDIAN_LITTLE, CLVersion.CL10),
    DEVICE_AVAILABLE(CL_DEVICE_AVAILABLE, CLVersion.CL10),
    DEVICE_COMPILER_AVAILABLE(CL_DEVICE_COMPILER_AVAILABLE, CLVersion.CL10),
    DEVICE_EXECUTION_CAPABILITIES(CL_DEVICE_EXECUTION_CAPABILITIES, CLVersion.CL10),
    DEVICE_QUEUE_PROPERTIES(CL_DEVICE_QUEUE_PROPERTIES, CLVersion.CL10),
    DEVICE_NAME(CL_DEVICE_NAME, CLVersion.CL10),
    DEVICE_VENDOR(CL_DEVICE_VENDOR, CLVersion.CL10),
    DRIVER_VERSION(CL_DRIVER_VERSION, CLVersion.CL10),
    DEVICE_PROFILE(CL_DEVICE_PROFILE, CLVersion.CL10),
    DEVICE_VERSION(CL_DEVICE_VERSION, CLVersion.CL10),
    DEVICE_EXTENSIONS(CL_DEVICE_EXTENSIONS, CLVersion.CL10),
    DEVICE_PLATFORM(CL_DEVICE_PLATFORM, CLVersion.CL10),
    
    DEVICE_PREFERRED_VECTOR_WIDTH_HALF(CL_DEVICE_PREFERRED_VECTOR_WIDTH_HALF, CLVersion.CL11),
    DEVICE_HOST_UNIFIED_MEMORY(CL_DEVICE_HOST_UNIFIED_MEMORY, CLVersion.CL11),
    DEVICE_NATIVE_VECTOR_WIDTH_CHAR(CL_DEVICE_NATIVE_VECTOR_WIDTH_CHAR, CLVersion.CL11),
    DEVICE_NATIVE_VECTOR_WIDTH_SHORT(CL_DEVICE_NATIVE_VECTOR_WIDTH_SHORT, CLVersion.CL11),
    DEVICE_NATIVE_VECTOR_WIDTH_INT(CL_DEVICE_NATIVE_VECTOR_WIDTH_INT, CLVersion.CL11),
    DEVICE_NATIVE_VECTOR_WIDTH_LONG(CL_DEVICE_NATIVE_VECTOR_WIDTH_LONG, CLVersion.CL11),
    DEVICE_NATIVE_VECTOR_WIDTH_FLOAT(CL_DEVICE_NATIVE_VECTOR_WIDTH_FLOAT, CLVersion.CL11),
    DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE(CL_DEVICE_NATIVE_VECTOR_WIDTH_DOUBLE, CLVersion.CL11),
    DEVICE_NATIVE_VECTOR_WIDTH_HALF(CL_DEVICE_NATIVE_VECTOR_WIDTH_HALF, CLVersion.CL11),
    DEVICE_OPENCL_C_VERSION(CL_DEVICE_OPENCL_C_VERSION, CLVersion.CL11),
    
    DEVICE_DOUBLE_FP_CONFIG(CL_DEVICE_DOUBLE_FP_CONFIG, CLVersion.CL12),
    DEVICE_LINKER_AVAILABLE(CL_DEVICE_LINKER_AVAILABLE, CLVersion.CL12),
    DEVICE_BUILT_IN_KERNELS(CL_DEVICE_BUILT_IN_KERNELS, CLVersion.CL12),
    DEVICE_IMAGE_MAX_BUFFER_SIZE(CL_DEVICE_IMAGE_MAX_BUFFER_SIZE, CLVersion.CL12),
    DEVICE_IMAGE_MAX_ARRAY_SIZE(CL_DEVICE_IMAGE_MAX_ARRAY_SIZE, CLVersion.CL12),
    DEVICE_PARENT_DEVICE(CL_DEVICE_PARENT_DEVICE, CLVersion.CL12),
    DEVICE_PARTITION_MAX_SUB_DEVICES(CL_DEVICE_PARTITION_MAX_SUB_DEVICES, CLVersion.CL12),
    DEVICE_PARTITION_PROPERTIES(CL_DEVICE_PARTITION_PROPERTIES, CLVersion.CL12),
    DEVICE_PARTITION_AFFINITY_DOMAIN(CL_DEVICE_PARTITION_AFFINITY_DOMAIN, CLVersion.CL12),
    DEVICE_PARTITION_TYPE(CL_DEVICE_PARTITION_TYPE, CLVersion.CL12),
    DEVICE_REFERENCE_COUNT(CL_DEVICE_REFERENCE_COUNT, CLVersion.CL12),
    DEVICE_PREFERRED_INTEROP_USER_SYNC(CL_DEVICE_PREFERRED_INTEROP_USER_SYNC, CLVersion.CL12),
    DEVICE_PRINTF_BUFFER_SIZE(CL_DEVICE_PRINTF_BUFFER_SIZE, CLVersion.CL12),
    
    DEVICE_QUEUE_ON_HOST_PROPERTIES(CL_DEVICE_QUEUE_ON_HOST_PROPERTIES, CLVersion.CL20),
    DEVICE_MAX_READ_WRITE_IMAGE_ARGS(CL_DEVICE_MAX_READ_WRITE_IMAGE_ARGS, CLVersion.CL20),
    DEVICE_MAX_GLOBAL_VARIABLE_SIZE(CL_DEVICE_MAX_GLOBAL_VARIABLE_SIZE, CLVersion.CL20),
    DEVICE_QUEUE_ON_DEVICE_PROPERTIES(CL_DEVICE_QUEUE_ON_DEVICE_PROPERTIES, CLVersion.CL20),
    DEVICE_QUEUE_ON_DEVICE_PREFERRED_SIZE(CL_DEVICE_QUEUE_ON_DEVICE_PREFERRED_SIZE, CLVersion.CL20),
    DEVICE_QUEUE_ON_DEVICE_MAX_SIZE(CL_DEVICE_QUEUE_ON_DEVICE_MAX_SIZE, CLVersion.CL20),
    DEVICE_MAX_ON_DEVICE_QUEUES(CL_DEVICE_MAX_ON_DEVICE_QUEUES, CLVersion.CL20),
    DEVICE_MAX_ON_DEVICE_EVENTS(CL_DEVICE_MAX_ON_DEVICE_EVENTS, CLVersion.CL20),
    DEVICE_SVM_CAPABILITIES(CL_DEVICE_SVM_CAPABILITIES, CLVersion.CL20),
    DEVICE_GLOBAL_VARIABLE_PREFERRED_TOTAL_SIZE(CL_DEVICE_GLOBAL_VARIABLE_PREFERRED_TOTAL_SIZE, CLVersion.CL20),
    DEVICE_MAX_PIPE_ARGS(CL_DEVICE_MAX_PIPE_ARGS, CLVersion.CL20),
    DEVICE_PIPE_MAX_ACTIVE_RESERVATIONS(CL_DEVICE_PIPE_MAX_ACTIVE_RESERVATIONS, CLVersion.CL20),
    DEVICE_PIPE_MAX_PACKET_SIZE(CL_DEVICE_PIPE_MAX_PACKET_SIZE, CLVersion.CL20),
    DEVICE_PREFERRED_PLATFORM_ATOMIC_ALIGNMENT(CL_DEVICE_PREFERRED_PLATFORM_ATOMIC_ALIGNMENT, CLVersion.CL20),
    DEVICE_PREFERRED_GLOBAL_ATOMIC_ALIGNMENT(CL_DEVICE_PREFERRED_GLOBAL_ATOMIC_ALIGNMENT, CLVersion.CL20),
    DEVICE_PREFERRED_LOCAL_ATOMIC_ALIGNMENT(CL_DEVICE_PREFERRED_LOCAL_ATOMIC_ALIGNMENT, CLVersion.CL20),
    
    DEVICE_IL_VERSION(CL_DEVICE_IL_VERSION, CLVersion.CL21),
    DEVICE_MAX_NUM_SUB_GROUPS(CL_DEVICE_MAX_NUM_SUB_GROUPS, CLVersion.CL21),
    DEVICE_SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS(CL_DEVICE_SUB_GROUP_INDEPENDENT_FORWARD_PROGRESS, CLVersion.CL21);
    // @formatter:on

    private final int id;
    private final CLVersion version;

    DeviceInfo(int id, CLVersion version) {
        this.id = id;
        this.version = version;
    }

    @Override
    public int id() {
        return id;
    }

    @Override
    public CLVersion version() {
        return version;
    }

    public CLInfoReader<?> getReader() {
        //noinspection SwitchStatementWithTooFewBranches
        switch (this) {
        case DEVICE_MAX_WORK_ITEM_SIZES:
            return b -> {
                PointerBuffer pb = PointerBuffer.create(b);
                long[] res = new long[pb.remaining()];
                pb.get(res);
                return res;
            };
        default:
            return b -> {
                if (b.remaining() > 8)
                    return MemoryUtil.memUTF8(b);
                if (b.remaining() == 8)
                    return b.getLong();
                if (b.remaining() == 4)
                    return b.getInt();
                if (b.remaining() == 2)
                    return b.getShort();
                if (b.remaining() == 1)
                    return b.get();
                return 0;
            };
        }
    }
}
